datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String     @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          String     @default("user") // User role, can be 'user', 'admin', etc.
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  addresses     Address[]
  cart          Cart[]
  wishlist      Wishlist[]

  // Relations to NextAuth.js models
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier   String
  token        String    @unique
  expires      DateTime

  @@unique([identifier, token])
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime @default(now())
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
